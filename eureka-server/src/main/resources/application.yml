spring:
  application:
    name: eureka-server #0 имя для сервера

server:
  port: ${PORT:8761} #0 порт для сервера

eureka:
  client:
    registerWithEureka: false #0 Так как мы не хотим, чтобы наш сервер Eureka зарегистрировался сам с собой
    fetchRegistry: false #1 Если мы не хотим чтобы клиент получал информацию реестра от Eureka Server
    eureka-server-connect-timeout-seconds: 60 #2 указать время ожидания (в секундах) до истечения тайм-аута соединения с Eureka Server
    eureka-service-url-poll-interval-seconds: 15 #3 как часто (в секундах) необходимо запрашивать изменения об информации с сервера
    use-dns-for-fetching-service-urls: false #4 запретить dns и укажи явный маршрут к серверам eureka (serviceUrl)
    prefer-same-zone-eureka: true #6.1 следует ли  экземпляру пытаться использовать сервер eureka в той же зоне из-за задержки по сети или по другой причине, или нет
    healthcheck:
      enabled: true #7 включить проверки работоспособности Eureka
    serviceUrl:
      defaultZone: https://${eureka.instance.hostname}:${server.port}/eureka/

  server:
    renewal-percent-threshold: 0.85 #5 установить порог самосохранения
    expected-client-Renewal-interval-seconds: 20 #8 указать свое время, по которому сервер будет ожидать эхо запрос от клиента о том что он жив (по умолчанию 30 секунд)

  instance:
    hostname: my-eureka-server.com
    metadata-map:
      zone: zone_A # 6.2 использовать сервер eureka в той же зоне
    lease-expiration-duration-in-seconds: 70 #9 Если Eureka Server не видел обновления в течение 70 секунд, он удаляет экземпляр из своего реестра